// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package auth_service

import (
	"context"

	"github.com/AlexMickh/twitch-clone/internal/entities"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockUserService
func (_mock *MockUserService) CreateUser(ctx context.Context, login string, email string, password string) (uuid.UUID, error) {
	ret := _mock.Called(ctx, login, email, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (uuid.UUID, error)); ok {
		return returnFunc(ctx, login, email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) uuid.UUID); ok {
		r0 = returnFunc(ctx, login, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, login, email, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
//   - email string
//   - password string
func (_e *MockUserService_Expecter) CreateUser(ctx interface{}, login interface{}, email interface{}, password interface{}) *MockUserService_CreateUser_Call {
	return &MockUserService_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, login, email, password)}
}

func (_c *MockUserService_CreateUser_Call) Run(run func(ctx context.Context, login string, email string, password string)) *MockUserService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockUserService_CreateUser_Call) Return(uUID uuid.UUID, err error) *MockUserService_CreateUser_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *MockUserService_CreateUser_Call) RunAndReturn(run func(ctx context.Context, login string, email string, password string) (uuid.UUID, error)) *MockUserService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// UserByEmail provides a mock function for the type MockUserService
func (_mock *MockUserService) UserByEmail(ctx context.Context, email string) (entities.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for UserByEmail")
	}

	var r0 entities.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (entities.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) entities.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Get(0).(entities.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_UserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserByEmail'
type MockUserService_UserByEmail_Call struct {
	*mock.Call
}

// UserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserService_Expecter) UserByEmail(ctx interface{}, email interface{}) *MockUserService_UserByEmail_Call {
	return &MockUserService_UserByEmail_Call{Call: _e.mock.On("UserByEmail", ctx, email)}
}

func (_c *MockUserService_UserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserService_UserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserService_UserByEmail_Call) Return(user entities.User, err error) *MockUserService_UserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserService_UserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (entities.User, error)) *MockUserService_UserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVerificationSender creates a new instance of MockVerificationSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVerificationSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVerificationSender {
	mock := &MockVerificationSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVerificationSender is an autogenerated mock type for the VerificationSender type
type MockVerificationSender struct {
	mock.Mock
}

type MockVerificationSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVerificationSender) EXPECT() *MockVerificationSender_Expecter {
	return &MockVerificationSender_Expecter{mock: &_m.Mock}
}

// SendVerification provides a mock function for the type MockVerificationSender
func (_mock *MockVerificationSender) SendVerification(to string, token string, login string) error {
	ret := _mock.Called(to, token, login)

	if len(ret) == 0 {
		panic("no return value specified for SendVerification")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = returnFunc(to, token, login)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockVerificationSender_SendVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendVerification'
type MockVerificationSender_SendVerification_Call struct {
	*mock.Call
}

// SendVerification is a helper method to define mock.On call
//   - to string
//   - token string
//   - login string
func (_e *MockVerificationSender_Expecter) SendVerification(to interface{}, token interface{}, login interface{}) *MockVerificationSender_SendVerification_Call {
	return &MockVerificationSender_SendVerification_Call{Call: _e.mock.On("SendVerification", to, token, login)}
}

func (_c *MockVerificationSender_SendVerification_Call) Run(run func(to string, token string, login string)) *MockVerificationSender_SendVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockVerificationSender_SendVerification_Call) Return(err error) *MockVerificationSender_SendVerification_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockVerificationSender_SendVerification_Call) RunAndReturn(run func(to string, token string, login string) error) *MockVerificationSender_SendVerification_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenService creates a new instance of MockTokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenService {
	mock := &MockTokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTokenService is an autogenerated mock type for the TokenService type
type MockTokenService struct {
	mock.Mock
}

type MockTokenService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenService) EXPECT() *MockTokenService_Expecter {
	return &MockTokenService_Expecter{mock: &_m.Mock}
}

// CreateToken provides a mock function for the type MockTokenService
func (_mock *MockTokenService) CreateToken(ctx context.Context, userId uuid.UUID, tokenType string) (string, error) {
	ret := _mock.Called(ctx, userId, tokenType)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (string, error)); ok {
		return returnFunc(ctx, userId, tokenType)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) string); ok {
		r0 = returnFunc(ctx, userId, tokenType)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = returnFunc(ctx, userId, tokenType)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTokenService_CreateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateToken'
type MockTokenService_CreateToken_Call struct {
	*mock.Call
}

// CreateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
//   - tokenType string
func (_e *MockTokenService_Expecter) CreateToken(ctx interface{}, userId interface{}, tokenType interface{}) *MockTokenService_CreateToken_Call {
	return &MockTokenService_CreateToken_Call{Call: _e.mock.On("CreateToken", ctx, userId, tokenType)}
}

func (_c *MockTokenService_CreateToken_Call) Run(run func(ctx context.Context, userId uuid.UUID, tokenType string)) *MockTokenService_CreateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTokenService_CreateToken_Call) Return(s string, err error) *MockTokenService_CreateToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockTokenService_CreateToken_Call) RunAndReturn(run func(ctx context.Context, userId uuid.UUID, tokenType string) (string, error)) *MockTokenService_CreateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessionService creates a new instance of MockSessionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionService {
	mock := &MockSessionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessionService is an autogenerated mock type for the SessionService type
type MockSessionService struct {
	mock.Mock
}

type MockSessionService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionService) EXPECT() *MockSessionService_Expecter {
	return &MockSessionService_Expecter{mock: &_m.Mock}
}

// CreateSession provides a mock function for the type MockSessionService
func (_mock *MockSessionService) CreateSession(ctx context.Context, userId uuid.UUID, userAgent string) (uuid.UUID, error) {
	ret := _mock.Called(ctx, userId, userAgent)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (uuid.UUID, error)); ok {
		return returnFunc(ctx, userId, userAgent)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) uuid.UUID); ok {
		r0 = returnFunc(ctx, userId, userAgent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = returnFunc(ctx, userId, userAgent)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionService_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type MockSessionService_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
//   - userAgent string
func (_e *MockSessionService_Expecter) CreateSession(ctx interface{}, userId interface{}, userAgent interface{}) *MockSessionService_CreateSession_Call {
	return &MockSessionService_CreateSession_Call{Call: _e.mock.On("CreateSession", ctx, userId, userAgent)}
}

func (_c *MockSessionService_CreateSession_Call) Run(run func(ctx context.Context, userId uuid.UUID, userAgent string)) *MockSessionService_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSessionService_CreateSession_Call) Return(uUID uuid.UUID, err error) *MockSessionService_CreateSession_Call {
	_c.Call.Return(uUID, err)
	return _c
}

func (_c *MockSessionService_CreateSession_Call) RunAndReturn(run func(ctx context.Context, userId uuid.UUID, userAgent string) (uuid.UUID, error)) *MockSessionService_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}
