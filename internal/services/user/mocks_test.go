// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package user_service

import (
	"context"

	"github.com/AlexMickh/twitch-clone/internal/entities"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// SaveUser provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) SaveUser(ctx context.Context, user entities.User) error {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.User) error); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_SaveUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUser'
type MockUserRepository_SaveUser_Call struct {
	*mock.Call
}

// SaveUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user entities.User
func (_e *MockUserRepository_Expecter) SaveUser(ctx interface{}, user interface{}) *MockUserRepository_SaveUser_Call {
	return &MockUserRepository_SaveUser_Call{Call: _e.mock.On("SaveUser", ctx, user)}
}

func (_c *MockUserRepository_SaveUser_Call) Run(run func(ctx context.Context, user entities.User)) *MockUserRepository_SaveUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 entities.User
		if args[1] != nil {
			arg1 = args[1].(entities.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepository_SaveUser_Call) Return(err error) *MockUserRepository_SaveUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_SaveUser_Call) RunAndReturn(run func(ctx context.Context, user entities.User) error) *MockUserRepository_SaveUser_Call {
	_c.Call.Return(run)
	return _c
}

// UserByEmail provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) UserByEmail(ctx context.Context, email string) (entities.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for UserByEmail")
	}

	var r0 entities.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (entities.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) entities.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Get(0).(entities.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_UserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserByEmail'
type MockUserRepository_UserByEmail_Call struct {
	*mock.Call
}

// UserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserRepository_Expecter) UserByEmail(ctx interface{}, email interface{}) *MockUserRepository_UserByEmail_Call {
	return &MockUserRepository_UserByEmail_Call{Call: _e.mock.On("UserByEmail", ctx, email)}
}

func (_c *MockUserRepository_UserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserRepository_UserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepository_UserByEmail_Call) Return(user entities.User, err error) *MockUserRepository_UserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_UserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (entities.User, error)) *MockUserRepository_UserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateEmail provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) ValidateEmail(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ValidateEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserRepository_ValidateEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateEmail'
type MockUserRepository_ValidateEmail_Call struct {
	*mock.Call
}

// ValidateEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockUserRepository_Expecter) ValidateEmail(ctx interface{}, id interface{}) *MockUserRepository_ValidateEmail_Call {
	return &MockUserRepository_ValidateEmail_Call{Call: _e.mock.On("ValidateEmail", ctx, id)}
}

func (_c *MockUserRepository_ValidateEmail_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockUserRepository_ValidateEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserRepository_ValidateEmail_Call) Return(err error) *MockUserRepository_ValidateEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserRepository_ValidateEmail_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockUserRepository_ValidateEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenService creates a new instance of MockTokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenService {
	mock := &MockTokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTokenService is an autogenerated mock type for the TokenService type
type MockTokenService struct {
	mock.Mock
}

type MockTokenService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenService) EXPECT() *MockTokenService_Expecter {
	return &MockTokenService_Expecter{mock: &_m.Mock}
}

// DeleteToken provides a mock function for the type MockTokenService
func (_mock *MockTokenService) DeleteToken(ctx context.Context, token string) error {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTokenService_DeleteToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteToken'
type MockTokenService_DeleteToken_Call struct {
	*mock.Call
}

// DeleteToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockTokenService_Expecter) DeleteToken(ctx interface{}, token interface{}) *MockTokenService_DeleteToken_Call {
	return &MockTokenService_DeleteToken_Call{Call: _e.mock.On("DeleteToken", ctx, token)}
}

func (_c *MockTokenService_DeleteToken_Call) Run(run func(ctx context.Context, token string)) *MockTokenService_DeleteToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTokenService_DeleteToken_Call) Return(err error) *MockTokenService_DeleteToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTokenService_DeleteToken_Call) RunAndReturn(run func(ctx context.Context, token string) error) *MockTokenService_DeleteToken_Call {
	_c.Call.Return(run)
	return _c
}

// Token provides a mock function for the type MockTokenService
func (_mock *MockTokenService) Token(ctx context.Context, token string) (entities.Token, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Token")
	}

	var r0 entities.Token
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (entities.Token, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) entities.Token); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Get(0).(entities.Token)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTokenService_Token_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Token'
type MockTokenService_Token_Call struct {
	*mock.Call
}

// Token is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockTokenService_Expecter) Token(ctx interface{}, token interface{}) *MockTokenService_Token_Call {
	return &MockTokenService_Token_Call{Call: _e.mock.On("Token", ctx, token)}
}

func (_c *MockTokenService_Token_Call) Run(run func(ctx context.Context, token string)) *MockTokenService_Token_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTokenService_Token_Call) Return(token1 entities.Token, err error) *MockTokenService_Token_Call {
	_c.Call.Return(token1, err)
	return _c
}

func (_c *MockTokenService_Token_Call) RunAndReturn(run func(ctx context.Context, token string) (entities.Token, error)) *MockTokenService_Token_Call {
	_c.Call.Return(run)
	return _c
}
