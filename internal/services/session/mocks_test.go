// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package session_service

import (
	"context"

	"github.com/AlexMickh/twitch-clone/internal/entities"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// SaveSession provides a mock function for the type MockRepository
func (_mock *MockRepository) SaveSession(ctx context.Context, session entities.Session) error {
	ret := _mock.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for SaveSession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Session) error); ok {
		r0 = returnFunc(ctx, session)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_SaveSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveSession'
type MockRepository_SaveSession_Call struct {
	*mock.Call
}

// SaveSession is a helper method to define mock.On call
//   - ctx context.Context
//   - session entities.Session
func (_e *MockRepository_Expecter) SaveSession(ctx interface{}, session interface{}) *MockRepository_SaveSession_Call {
	return &MockRepository_SaveSession_Call{Call: _e.mock.On("SaveSession", ctx, session)}
}

func (_c *MockRepository_SaveSession_Call) Run(run func(ctx context.Context, session entities.Session)) *MockRepository_SaveSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 entities.Session
		if args[1] != nil {
			arg1 = args[1].(entities.Session)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_SaveSession_Call) Return(err error) *MockRepository_SaveSession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_SaveSession_Call) RunAndReturn(run func(ctx context.Context, session entities.Session) error) *MockRepository_SaveSession_Call {
	_c.Call.Return(run)
	return _c
}

// SessionById provides a mock function for the type MockRepository
func (_mock *MockRepository) SessionById(ctx context.Context, sessionId string) (entities.Session, error) {
	ret := _mock.Called(ctx, sessionId)

	if len(ret) == 0 {
		panic("no return value specified for SessionById")
	}

	var r0 entities.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (entities.Session, error)); ok {
		return returnFunc(ctx, sessionId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) entities.Session); ok {
		r0 = returnFunc(ctx, sessionId)
	} else {
		r0 = ret.Get(0).(entities.Session)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, sessionId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_SessionById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SessionById'
type MockRepository_SessionById_Call struct {
	*mock.Call
}

// SessionById is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionId string
func (_e *MockRepository_Expecter) SessionById(ctx interface{}, sessionId interface{}) *MockRepository_SessionById_Call {
	return &MockRepository_SessionById_Call{Call: _e.mock.On("SessionById", ctx, sessionId)}
}

func (_c *MockRepository_SessionById_Call) Run(run func(ctx context.Context, sessionId string)) *MockRepository_SessionById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_SessionById_Call) Return(session entities.Session, err error) *MockRepository_SessionById_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockRepository_SessionById_Call) RunAndReturn(run func(ctx context.Context, sessionId string) (entities.Session, error)) *MockRepository_SessionById_Call {
	_c.Call.Return(run)
	return _c
}
