// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package token_service

import (
	"context"

	"github.com/AlexMickh/twitch-clone/internal/entities"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// DeleteToken provides a mock function for the type MockRepository
func (_mock *MockRepository) DeleteToken(ctx context.Context, token string) error {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_DeleteToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteToken'
type MockRepository_DeleteToken_Call struct {
	*mock.Call
}

// DeleteToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockRepository_Expecter) DeleteToken(ctx interface{}, token interface{}) *MockRepository_DeleteToken_Call {
	return &MockRepository_DeleteToken_Call{Call: _e.mock.On("DeleteToken", ctx, token)}
}

func (_c *MockRepository_DeleteToken_Call) Run(run func(ctx context.Context, token string)) *MockRepository_DeleteToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_DeleteToken_Call) Return(err error) *MockRepository_DeleteToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_DeleteToken_Call) RunAndReturn(run func(ctx context.Context, token string) error) *MockRepository_DeleteToken_Call {
	_c.Call.Return(run)
	return _c
}

// SaveToken provides a mock function for the type MockRepository
func (_mock *MockRepository) SaveToken(ctx context.Context, token entities.Token) error {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for SaveToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Token) error); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_SaveToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveToken'
type MockRepository_SaveToken_Call struct {
	*mock.Call
}

// SaveToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token entities.Token
func (_e *MockRepository_Expecter) SaveToken(ctx interface{}, token interface{}) *MockRepository_SaveToken_Call {
	return &MockRepository_SaveToken_Call{Call: _e.mock.On("SaveToken", ctx, token)}
}

func (_c *MockRepository_SaveToken_Call) Run(run func(ctx context.Context, token entities.Token)) *MockRepository_SaveToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 entities.Token
		if args[1] != nil {
			arg1 = args[1].(entities.Token)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_SaveToken_Call) Return(err error) *MockRepository_SaveToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_SaveToken_Call) RunAndReturn(run func(ctx context.Context, token entities.Token) error) *MockRepository_SaveToken_Call {
	_c.Call.Return(run)
	return _c
}

// Token provides a mock function for the type MockRepository
func (_mock *MockRepository) Token(ctx context.Context, token string) (entities.Token, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Token")
	}

	var r0 entities.Token
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (entities.Token, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) entities.Token); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Get(0).(entities.Token)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Token_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Token'
type MockRepository_Token_Call struct {
	*mock.Call
}

// Token is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockRepository_Expecter) Token(ctx interface{}, token interface{}) *MockRepository_Token_Call {
	return &MockRepository_Token_Call{Call: _e.mock.On("Token", ctx, token)}
}

func (_c *MockRepository_Token_Call) Run(run func(ctx context.Context, token string)) *MockRepository_Token_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_Token_Call) Return(token1 entities.Token, err error) *MockRepository_Token_Call {
	_c.Call.Return(token1, err)
	return _c
}

func (_c *MockRepository_Token_Call) RunAndReturn(run func(ctx context.Context, token string) (entities.Token, error)) *MockRepository_Token_Call {
	_c.Call.Return(run)
	return _c
}
